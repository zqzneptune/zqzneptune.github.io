<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software | zqzneptune</title>
    <link>https://zqzneptune.github.io/categories/software/</link>
      <atom:link href="https://zqzneptune.github.io/categories/software/index.xml" rel="self" type="application/rss+xml" />
    <description>Software</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2014-2020 Qingzhou Zhang (CC) BY-NC-SA 4.0. All thoughts and opinions here are my own.</copyright><lastBuildDate>Thu, 12 Dec 2019 18:13:14 -0600</lastBuildDate>
    <image>
      <url>https://zqzneptune.github.io/images/icon_huf504e8a2f7c5cf9e43cec507892894a0_49847_512x512_fill_lanczos_center_2.png</url>
      <title>Software</title>
      <link>https://zqzneptune.github.io/categories/software/</link>
    </image>
    
    <item>
      <title>Run EPIC</title>
      <link>https://zqzneptune.github.io/post/2019-12-12-runepic/</link>
      <pubDate>Thu, 12 Dec 2019 18:13:14 -0600</pubDate>
      <guid>https://zqzneptune.github.io/post/2019-12-12-runepic/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;EPIC&lt;/strong&gt; toolkit was initially published here: Hu, L. Z., et al. &amp;ldquo;EPIC: software toolkit for elution profile-based inference of protein complexes.&amp;rdquo; Nature methods 16.8 (2019): 737-742. &lt;a href=&#34;https://www.nature.com/articles/s41592-019-0461-4&#34;&gt;Link to the publication&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Forked from the orignial &lt;a href=&#34;https://github.com/BaderLab/EPIC&#34;&gt;repository&lt;/a&gt;, I have created &lt;strong&gt;RunEPIC&lt;/strong&gt;  to provide the code to run &lt;strong&gt;EPIC&lt;/strong&gt; locally.&lt;/p&gt;
&lt;h2 id=&#34;1-environment&#34;&gt;1. Environment&lt;/h2&gt;
&lt;p&gt;The main function in &lt;strong&gt;EPIC&lt;/strong&gt; was implemented in Python, given the headache caused by various libraries, the Anaconda enrionment was used. Simply install Anaconda Python 2.7 version for your convience, and we will start from there.&lt;/p&gt;
&lt;h2 id=&#34;2-prerequisite&#34;&gt;2. Prerequisite&lt;/h2&gt;
&lt;p&gt;Let&#39;s create the virtual enrionment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path to the anaconda directory/bin/conda create -n EPIC python=2.7 anaconda
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then we need step up some chanels:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(EPIC)conda config --add channels defaults
(EPIC)conda config --add channels bioconda
(EPIC)conda config --add channels conda-forge
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get R installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(EPIC)conda install r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start R:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(EPIC)R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install wccsom for computing WCC scores:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; install.packages(&amp;quot;kohonen&amp;quot;)
&amp;gt; install.packages(&amp;quot;https://cran.r-project.org/src/contrib/Archive/wccsom/wccsom_1.2.11.tar.gz&amp;quot;,
                 type = &amp;quot;source&amp;quot;)
&amp;gt; q()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install conda packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install requests scikit-learn beautifulsoup4 mock numpy rpy2
python -mpip install -U matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lastly, make sure Java is installed, so that ClusterOne.jar could be used.&lt;/p&gt;
&lt;h2 id=&#34;3-run-epic&#34;&gt;3. Run EPIC&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/zqzneptune/RunEPIC.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main.py in &lt;strong&gt;EPIC&lt;/strong&gt; implemented all the functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python directory to RunEPIC/src/main.py \
       -s 11101001 \
       [Directory to Input Folder/] \
       -c [path to the gold standard file ] \
       [Directory to Output Folder/] \
       -o PrefixName \
       -M RF \
       -n 6 \
       -m COMB \
       -f STRING
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Modelling of AP-MS Data (SMAD)</title>
      <link>https://zqzneptune.github.io/post/2019-05-22-smad/</link>
      <pubDate>Wed, 22 May 2019 09:13:14 -0600</pubDate>
      <guid>https://zqzneptune.github.io/post/2019-05-22-smad/</guid>
      <description>&lt;p&gt;This R package implements statistical modelling of affinity purification–mass spectrometry (AP-MS) data to compute confidence scores to identify &lt;em&gt;bona fide&lt;/em&gt; protein-protein interactions (PPI).&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The development version can be installed through github:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt; devtools::install_github(repo=&amp;quot;zqzneptune/SMAD&amp;quot;)
 library(SMAD)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;input-data&#34;&gt;Input Data&lt;/h2&gt;
&lt;p&gt;A demo data.frame was provided as a hint how the input data should strcutured in order to run the scoring functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data(TestDatInput)
colnames(TestDataInput)

[1] &amp;quot;idRun&amp;quot; &amp;quot;idBait&amp;quot; &amp;quot;idPrey&amp;quot; &amp;quot;countPrey&amp;quot; &amp;quot;lenPrey&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;idRun&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;idBait&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;idPrey&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;countPrey&lt;/th&gt;
&lt;th&gt;lenPrey&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unique ID of one AP-MS run&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Bait ID&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Prey ID&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Prey peptide count&lt;/td&gt;
&lt;td&gt;Protein sequence length of the prey&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In case of duplcates, a suffix or prefix of e.g. &amp;ldquo;A&amp;rdquo;, &amp;ldquo;B&amp;rdquo; could be added to &lt;strong&gt;idRun&lt;/strong&gt; in order to make &lt;strong&gt;&amp;ldquo;idRun-idBait&amp;rdquo;&lt;/strong&gt; combination unique to each replicate.&lt;/p&gt;
&lt;h2 id=&#34;run-scoring&#34;&gt;Run scoring&lt;/h2&gt;
&lt;h3 id=&#34;1-comppass&#34;&gt;1. CompPASS&lt;/h3&gt;
&lt;p&gt;Comparative Proteomic Analysis Software Suite (CompPASS) is based on spoke model. This algorithm was developed by Dr. Mathew Sowa for defining the human deubiquitinating enzyme interaction landscape &lt;a href=&#34;https://doi.org/10.1016/j.cell.2009.04.042&#34;&gt;(Sowa, Mathew E., et al., 2009)&lt;/a&gt;. The implementation of this algorithm was inspired by Dr. Sowa&#39;s &lt;a href=&#34;http://besra.hms.harvard.edu/ipmsmsdbs/cgi-bin/tutorial.cgi&#34;&gt;online tutorial&lt;/a&gt;. The output includes Z-score, S-score, D-score and WD-score. In its implementation in BioPlex 1.0 &lt;a href=&#34;https://doi.org/10.1016/j.cell.2015.06.043&#34;&gt;(Huttlin, Edward L., et al., 2015)&lt;/a&gt; and
BioPlex 2.0 &lt;a href=&#34;https://www.nature.com/articles/nature22366&#34;&gt;(Huttlin, Edward L., et al., 2017)&lt;/a&gt;, a naive
Bayes classifier that learns to distinguish true interacting proteins from
non-specific background and false positive identifications was included in the
compPASS pipline. This function was optimized from the &lt;a href=&#34;https://github.com/dnusinow/cRomppass&#34;&gt;source code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The input data.frame, &lt;em&gt;datInput&lt;/em&gt;, should include:&lt;strong&gt;idRun&lt;/strong&gt;, &lt;strong&gt;idBait&lt;/strong&gt;, &lt;strong&gt;idPrey&lt;/strong&gt; and &lt;strong&gt;countPrey&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;datScore &amp;lt;- CompPASS(datInput)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-dice&#34;&gt;2. DICE&lt;/h3&gt;
&lt;p&gt;The Dice coefficient is used to score the interaction scores across prey pair-wise combinations, which was proposed by &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btn036&#34;&gt;(Bing Zhang et al., 2008)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The input data.frame, &lt;em&gt;datInput&lt;/em&gt;, should include:&lt;strong&gt;idRun&lt;/strong&gt; and &lt;strong&gt;idPrey&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;datScore &amp;lt;- DICE(datInput)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-hart&#34;&gt;3. Hart&lt;/h3&gt;
&lt;p&gt;Hart scoring algorithm is based on a hypergeometric distribution error model &lt;a href=&#34;https://doi.org/10.1186/1471-2105-8-236&#34;&gt;(Hart et al., 2007)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The input data.frame, &lt;em&gt;datInput&lt;/em&gt;, should include:&lt;strong&gt;idRun&lt;/strong&gt; and &lt;strong&gt;idPrey&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;datScore &amp;lt;- Hart(datInput)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-hgscore&#34;&gt;4. HGScore&lt;/h3&gt;
&lt;p&gt;HGScore algorithm is based on a hypergeometric distribution error model &lt;a href=&#34;https://doi.org/10.1186/1471-2105-8-236&#34;&gt;(Hart et al., 2007)&lt;/a&gt; with incorporation of NSAF &lt;a href=&#34;https://doi.org/10.1021/pr060161n&#34;&gt;(Zybailov, Boris, et al., 2006)&lt;/a&gt;. This algorithm was first introduced to predict the protein complex network of Drosophila melanogaster &lt;a href=&#34;https://doi.org/10.1016/j.cell.2011.08.047&#34;&gt;(Guruharsha, K. G., et al., 2011)&lt;/a&gt;. This scoring algorithm was based on matrix model.&lt;/p&gt;
&lt;p&gt;The input data.frame, &lt;em&gt;datInput&lt;/em&gt;, should include:&lt;strong&gt;idRun&lt;/strong&gt;, &lt;strong&gt;idPrey&lt;/strong&gt;, &lt;strong&gt;countPrey&lt;/strong&gt; and &lt;strong&gt;lenPrey&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;datScore &amp;lt;- HG(datInput)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-pe&#34;&gt;5. PE&lt;/h3&gt;
&lt;p&gt;PE incorporated both spoke and matrix model as repored in &lt;a href=&#34;https://doi.org/10.1074/mcp.M600381-MCP200&#34;&gt;(Sean R. Collins, et al., 2007)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The input data.frame, &lt;em&gt;datInput&lt;/em&gt;, should include:&lt;strong&gt;idRun&lt;/strong&gt;, &lt;strong&gt;idBait&lt;/strong&gt; and &lt;strong&gt;idPrey&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;datScore &amp;lt;- PE(datInput)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;MIT @ Qingzhou Zhang&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
